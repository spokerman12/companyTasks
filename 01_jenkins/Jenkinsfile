def agents  = ['win64', 'linux64', 'macos']
 
def generateStage(nodeLabel) {
    return {
        stage("Runs on ${nodeLabel}") {
            node(nodeLabel) {
               script {
                    echo "Running on ${nodeLabel}"
                    echo '************************'
                    echo '*****BUILDING JOBS******'
                    echo '************************'
                    sh 'python build.py'
                    sh 'cd ion-js && npm run prepublishOnly'
                }
            }
        }
    }
}
def parallelStagesMap = agents.collectEntries {
    ["${it}" : generateStage(it)]
}


pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-user-github', url: 'https://github.com/spokerman12/companyTasks.git']]])
                sh "ls -lart ./*"
            }
        } 
        stage('Tests (Unit)') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
        stage('Tests (Integration)') { // https://plugins.jenkins.io/pipeline-aws/
            steps {
                bat "pytest -k test_unit_a" 
            }
        }
        stage('Upload artifacts') { // https://plugins.jenkins.io/pipeline-aws/
            steps {
                bat "pytest -k test_unit_a" 
            }
        }
    } // usa vault en algun momento
}


// (
//                         "Test (unit, group A)": { 
//                             bat "pytest -k test_unit_a" 
//                         },
//                         "Test (unit, group B)": { 
//                             bat "pytest -k test_unit_b" 
//                         }
//                 )